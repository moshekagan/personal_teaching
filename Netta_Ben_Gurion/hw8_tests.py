from Netta_Ben_Gurion.hw8 import LinkedListBinaryNum, ByteNode

print('Node tests:')
# bn = ByteNode(10000000) #TypeError
# bn = ByteNode('100000001') #ValueError
# bn = ByteNode('10020001') #ValueError
# bn = ByteNode('10011000')
# print(bn.get_byte() == '10011000')
# print(isinstance(bn.get_byte(), str))
# print(bn.get_next() is None)
# print(str(bn) == '[10011000]=>')

# print('LinkedListBinaryNum tests:')
# print(LinkedListBinaryNum(0).__repr__())
# print(LinkedListBinaryNum(255).__repr__())
# print(LinkedListBinaryNum(0).__repr__() == 'LinkedListBinaryNum with 1 Byte, Bytes map: [00000000]=>None')
# print(LinkedListBinaryNum(255).__repr__() == 'LinkedListBinaryNum with 1 Byte, Bytes map: [11111111]=>None')
# print(LinkedListBinaryNum(4294967296).__repr__() == 'LinkedListBinaryNum with 5 Bytes, Bytes map: [00000001]=>[00000000]=>[00000000]=>[00000000]=>[00000000]=>None')
# print(LinkedListBinaryNum(0).__str__() == '|00000000|')
# print(LinkedListBinaryNum(255).__str__() == '|11111111|')
# print(LinkedListBinaryNum(4294967296).__str__() == '|00000001|00000000|00000000|00000000|00000000|')
# print(len(LinkedListBinaryNum(4294967296)) == 5)
# print(LinkedListBinaryNum(654321)[0] == '00001001')
# print(LinkedListBinaryNum(654321)[-1] == '11110001')
# bn1 = LinkedListBinaryNum(4294967296)
# bn2 = LinkedListBinaryNum(4294967297)
# print(not bn1 == bn2)
# print(bn1 != bn2)
# print(bn1 < bn2)
# print(not bn1 >= bn2)
# print(not bn1 > bn2)
# print(bn1 <= bn2)
# bn1 = LinkedListBinaryNum(254)
# bn2 = LinkedListBinaryNum(255)
# print(not bn1 == bn2)
# print(bn1 != bn2)
# print(bn1 < bn2)
# print(not bn1 >= bn2)
# print(not bn1 > bn2)
# print(bn1 <= bn2)
# print(str(LinkedListBinaryNum(1000000) + LinkedListBinaryNum(2000000)) == '|00101101|11000110|11000000|')
# print(str(LinkedListBinaryNum(1000000) + 2000000) == '|00101101|11000110|11000000|')
# print(str(1000000 + LinkedListBinaryNum(2000000)) == '|00101101|11000110|11000000|')
# print(str(LinkedListBinaryNum(4294967297)-1) == '|00000001|00000000|00000000|00000000|00000000|')
# print(str(LinkedListBinaryNum(510)-LinkedListBinaryNum(256)) == '|11111110|')
#
# print('DoublyLinkedNode tests:')
# dln1 = DoublyLinkedNode('1st')
# print(str(dln1) == '=>[1st]<=')
# print(dln1.get_data() == '1st')
# dln2 = DoublyLinkedNode('2nd')
# dln1.set_next(dln2)
# dln2.set_prev(dln1)
# print(str(dln1.get_prev()) == 'None')
# print(str(dln1.get_next()) == '=>[2nd]<=')
# print(str(dln2.get_prev()) == '=>[1st]<=')
# print(str(dln2.get_next()) == 'None')
#
# print('DoublyLinkedList tests:')
# dll = DoublyLinkedList()
# print(str(dll) == 'Head==><==Tail')
# print(len(dll) == 0)
# print(dll.is_empty() == True)
# print(dll.get_head() is None)
# print(dll.get_tail() is None)
# dll.add_at_start('B')
# dll.add_at_start(2)
# dll.add_at_start('or not')
# dll.add_at_start('B')
# dll.add_at_start(2)
# print(str(dll) == 'Head==>[2]<==>[B]<==>[or not]<==>[2]<==>[B]<==Tail')
# print(dll.remove_from_end() == 'B')
# print(str(dll) == 'Head==>[2]<==>[B]<==>[or not]<==>[2]<==Tail')
#
# print('DoublyLinkedListQueue tests:')
# q = DoublyLinkedListQueue()
# print(str(q) == 'Newest=>[]<=Oldest')
# print(len(q) == 0)
# print(q.is_empty())
# q.enqueue('you')
# q.enqueue(4)
# q.enqueue('queue')
# print(str(q) == 'Newest=>[queue,4,you]<=Oldest')
# print(len(q) == 3)
# print(not q.is_empty())
# print(q.dequeue() == 'you')
# print(str(q) == 'Newest=>[queue,4]<=Oldest')
# it = iter(q)
# print(next(it) == 4)
# print(next(it) == 'queue')
#next(it) #StopIteration
